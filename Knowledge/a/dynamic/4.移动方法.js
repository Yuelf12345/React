/**
 * 一个机器人位于一个 m×n 网格的左上角。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角。问总共有多少条不同的路径？
    样例输入： m=3,n=2
    样例输出： 3
  [(1,1),...,(1,i-1),(1,i),...]
  [...,[...],[...],[...],[...]]
  [(j-1,1),...,(j-1,i-1),(j-1,i),...]
  [(j,1),...,(j,i-1),(j,i),...]
  [...,[...],[...],[...],[...]]
  dp[i][j] = dp[i-1][j] + dp[i][j-1]
 */

function uniquePaths(m, n) {
   // 创建二维数组 dp，其中 dp[i][j] 表示到达位置 (i,j) 的路径数
    const dp = Array(m).fill().map(() => Array(n).fill(0));
    
    // 初始化第一行，所有位置都只有一种路径（一直向右）
    for (let j = 0; j < n; j++) {
        dp[0][j] = 1;
    }
    
    // 初始化第一列，所有位置都只有一种路径（一直向下）
    for (let i = 0; i < m; i++) {
        dp[i][0] = 1;
    }
    
    // 填充 dp 表格
    for (let i = 1; i < m; i++) {
        for (let j = 1; j < n; j++) {
            // 当前位置的路径数等于上方和左方位置路径数之和
            dp[i][j] = dp[i-1][j] + dp[i][j-1];
        }
    }
    console.log('dp',dp);
    
    // 返回右下角位置的路径数
    return dp[m-1][n-1];
}

console.log(uniquePaths(3, 3));
